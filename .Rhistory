source('~/kaggle.R')
source('~/kaggle.R')
install.packages(c(RSQLite, dplyr, ggplot2))
install.packages(c("RSQLite", "dplyr", "ggplot2"))
source('~/kaggle.R')
db <- src_sqlite('../input/database.sqlite', create = FALSE)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages(‘AppliedPredictiveModeling’)
install.packages(‘AppliedPredictiveModeling'')
install.packages(‘AppliedPredictiveModeling')
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
ls()
adData
ls()
diag()
diagnosis
trainIndex
library(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
training <- spam[inTrain,]
head(spam)
rm(list=ls())
choose(7, 2)
choose(2, 7)
choose(7, 3)
choose(7, 7)
choose(7, 2)
choose(8, 2)
choose(15, 2)
choose(100, 2)
choose(1000, 2)
choose(10, 3)
choose(10, 5)
choose(10, 10)
choose(10, 9)
choose(10, 8)
choose(10, 7)
choose(10, 6)
choose(10, 5)
choose(10, 4)
choose(10, 3)
choose(10, 2)
choose(10, 1)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(testing$Superplasticizer)
hist(training$Superplasticizer)
hist(concrete$Superplasticizer)
hist(mixtures$Superplasticizer)
rm(list=ls())
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
rm(list=ls())
control <- read.csv("AnalysisFilesSpeed/MZZ_R_3013849@UAS_Chrimson_Venus_X_0070@t15@r_LED100_30s2x15s30s#n#n#n@100.abscast-ave-err-data.txt", header = T, sep = "")
control <- mutate(control, sem = stddev/sqrt(count))
control <- control[1:240, ]
plotTimeSeriesAbcast <- function(line) {
speed <- mutate(line, sem = stddev/sqrt(count))
speed <- speed[1:240, ]
g <- ggplot(speed, aes(time))
g <- g + geom_rect(aes(ymin= 0, ymax = 40, xmin = 30, xmax = 45),
alpha = 0.05, fill = "slategray2")
g <- g + geom_rect(aes(ymin= 0, ymax = 40, xmin = 75, xmax = 90),
alpha = 0.05, fill = "slategray2")
g <- g + geom_line(aes(y = average), colour = "steelblue", size = 1.5)
g <- g + geom_line(aes(y = average + sem), colour = "black", alpha = 0.5)
g <- g + geom_line(aes(y = average - sem), colour = "black", alpha = 0.5)
g <- g + geom_line(data = control, aes(time, average), colour = "red", alpha = 0.5)
g <- g + geom_line(data = control, aes(time, average + sem), colour = "black", alpha = 0.5)
g <- g + geom_line(data = control, aes(time, average - sem), colour = "black", alpha = 0.5)
g <- g + coord_cartesian(xlim = c(0, 75), ylim = c(0, 40))
g <- g + ggtitle(paste(substitute(line), "Mean Turn Angle Time Series"))
g <- g + xlab("Time (s)")
g <- g + ylab("Mean Turn Angle (Deg)")
g
}
# Calyx: Mbon 7a,b,c
# SS02006 = MBON7a
Calyx_MBON7a <- read.csv("AnalysisFilesSpeed/GMR_SS02006@UAS_Chrimson_Venus_X_0070@t15@r_LED100_30s2x15s30s#n#n#n@100.abscast-ave-err-data.txt", header = T, sep = "")
# SS01417 = MBON7b
Calyx_MBON7b <- read.csv("AnalysisFilesSpeed/GMR_SS01417@UAS_Chrimson_Venus_X_0070@t15@r_LED100_30s2x15s30s#n#n#n@100.abscast-ave-err-data.txt", header = T, sep = "")
# SS00867 = MBON7c
Calyx_MBON7c <- read.csv("AnalysisFilesSpeed/GMR_SS00867@UAS_Chrimson_Venus_X_0070@t15@r_LED100_30s2x15s30s#n#n#n@100.abscast-ave-err-data.txt", header = T, sep = "")
plotTimeSeriesAbcast(Calyx_MBON7a)
plotTimeSeriesAbcast(Calyx_MBON7b)
plotTimeSeriesAbcast(Calyx_MBON7c)
# Peduncle: MBON11 and MBON18 -- I don't have MBON18 in the current data
# SS01708 = MBON11
Peduncle_MBON11 <- read.csv("AnalysisFilesSpeed/GMR_SS01708@UAS_Chrimson_Venus_X_0070@t15@r_LED100_30s2x15s30s#n#n#n@100.abscast-ave-err-data.txt", header = T, sep = "")
plotTimeSeriesAbcast(Peduncle_MBON11)
# Spur (aversive memory): MBON6, MBON19
# SS01665 = MBON6
Spur_MBON6 <- read.csv("AnalysisFilesSpeed/GMR_SS01665@UAS_Chrimson_Venus_X_0070@t15@r_LED100_30s2x15s30s#n#n#n@100.abscast-ave-err-data.txt", header = T, sep = "")
# SS01350 = MBON19
Spur_MBON19 <- read.csv("AnalysisFilesSpeed/GMR_SS01350@UAS_Chrimson_Venus_X_0070@t15@r_LED100_30s2x15s30s#n#n#n@100.abscast-ave-err-data.txt", header = T, sep = "")
plotTimeSeriesAbcast(Spur_MBON6)
plotTimeSeriesAbcast(Spur_MBON19)
# Vertical Lobe (aversive memory): MBON9b, 24b, 16, 34, 15a,b, 20
# SS01744 = MBON16
Vertical_Lobe_MBON16 <- read.csv("AnalysisFilesSpeed/GMR_SS01744@UAS_Chrimson_Venus_X_0070@t15@r_LED100_30s2x15s30s#n#n#n@100.abscast-ave-err-data.txt", header = T, sep = "")
# SS02130 = MBON515a_15b
Vertical_Lobe_MBON515a_15b <- read.csv("AnalysisFilesSpeed/GMR_SS02130@UAS_Chrimson_Venus_X_0070@t15@r_LED100_30s2x15s30s#n#n#n@100.abscast-ave-err-data.txt", header = T, sep = "")
# SS02163 = MBON20
Vertical_Lobe_MBON20 <- read.csv("AnalysisFilesSpeed/GMR_SS02163@UAS_Chrimson_Venus_X_0070@t15@r_LED100_30s2x15s30s#n#n#n@100.abscast-ave-err-data.txt", header = T, sep = "")
plotTimeSeriesAbcast(Vertical_Lobe_MBON16)
plotTimeSeriesAbcast(Vertical_Lobe_MBON515a_15b)
plotTimeSeriesAbcast(Vertical_Lobe_MBON20)
# Medial Lobe (appetitive memory): MBON13a,b, MBON5a,b, MBON2a
# SS00894 = MBON13_13b
Medial_Lobe_MBON13_13b <- read.csv("AnalysisFilesSpeed/GMR_SS00894@UAS_Chrimson_Venus_X_0070@t15@r_LED100_30s2x15s30s#n#n#n@100.abscast-ave-err-data.txt", header = T, sep = "")
# SS01726 = MBON5a
Medial_Lobe_MBON5a <- read.csv("AnalysisFilesSpeed/GMR_SS01726@UAS_Chrimson_Venus_X_0070@t15@r_LED100_30s2x15s30s#n#n#n@100.abscast-ave-err-data.txt", header = T, sep = "")
# SS01962 = MBON5b
Medial_Lobe_MBON5b <- read.csv("AnalysisFilesSpeed/GMR_SS01962@UAS_Chrimson_Venus_X_0070@t15@r_LED100_30s2x15s30s#n#n#n@100.abscast-ave-err-data.txt", header = T, sep = "")
# SS01972 = MBON2a
Medial_Lobe_MBON2a <- read.csv("AnalysisFilesSpeed/GMR_SS01972@UAS_Chrimson_Venus_X_0070@t15@r_LED100_30s2x15s30s#n#n#n@100.abscast-ave-err-data.txt", header = T, sep = "")
plotTimeSeriesAbcast(Medial_Lobe_MBON13_13b)
plotTimeSeriesAbcast(Medial_Lobe_MBON5a)
plotTimeSeriesAbcast(Medial_Lobe_MBON5b)
plotTimeSeriesAbcast(Medial_Lobe_MBON2a)
# Convergence Neuron
# SS02108 = Convergence_Neuron
Convergence_Neuron <- read.csv("AnalysisFilesSpeed/GMR_SS02108@UAS_Chrimson_Venus_X_0070@t15@r_LED100_30s2x15s30s#n#n#n@100.abscast-ave-err-data.txt", header = T, sep = "")
plotTimeSeriesAbcast(Convergence_Neuron)
# Extra?
# SS01671 = MBON12
MBON12 <- read.csv("AnalysisFilesSpeed/GMR_SS01671@UAS_Chrimson_Venus_X_0070@t15@r_LED100_30s2x15s30s#n#n#n@100.abscast-ave-err-data.txt", header = T, sep = "")
plotTimeSeriesAbcast(MBON12)
require(ggplot2)
require(dplyr)
# Calyx: Mbon 7a,b,c
# SS02006 = MBON7a
Calyx_MBON7a <- read.csv("AnalysisFilesSpeed/GMR_SS02006@UAS_Chrimson_Venus_X_0070@t15@r_LED100_30s2x15s30s#n#n#n@100.abscast-ave-err-data.txt", header = T, sep = "")
# SS01417 = MBON7b
Calyx_MBON7b <- read.csv("AnalysisFilesSpeed/GMR_SS01417@UAS_Chrimson_Venus_X_0070@t15@r_LED100_30s2x15s30s#n#n#n@100.abscast-ave-err-data.txt", header = T, sep = "")
# SS00867 = MBON7c
Calyx_MBON7c <- read.csv("AnalysisFilesSpeed/GMR_SS00867@UAS_Chrimson_Venus_X_0070@t15@r_LED100_30s2x15s30s#n#n#n@100.abscast-ave-err-data.txt", header = T, sep = "")
plotTimeSeriesAbcast(Calyx_MBON7a)
plotTimeSeriesAbcast(Calyx_MBON7b)
plotTimeSeriesAbcast(Calyx_MBON7c)
# Peduncle: MBON11 and MBON18 -- I don't have MBON18 in the current data
# SS01708 = MBON11
Peduncle_MBON11 <- read.csv("AnalysisFilesSpeed/GMR_SS01708@UAS_Chrimson_Venus_X_0070@t15@r_LED100_30s2x15s30s#n#n#n@100.abscast-ave-err-data.txt", header = T, sep = "")
plotTimeSeriesAbcast(Peduncle_MBON11)
# Spur (aversive memory): MBON6, MBON19
# SS01665 = MBON6
Spur_MBON6 <- read.csv("AnalysisFilesSpeed/GMR_SS01665@UAS_Chrimson_Venus_X_0070@t15@r_LED100_30s2x15s30s#n#n#n@100.abscast-ave-err-data.txt", header = T, sep = "")
# SS01350 = MBON19
Spur_MBON19 <- read.csv("AnalysisFilesSpeed/GMR_SS01350@UAS_Chrimson_Venus_X_0070@t15@r_LED100_30s2x15s30s#n#n#n@100.abscast-ave-err-data.txt", header = T, sep = "")
plotTimeSeriesAbcast(Spur_MBON6)
plotTimeSeriesAbcast(Spur_MBON19)
# Vertical Lobe (aversive memory): MBON9b, 24b, 16, 34, 15a,b, 20
# SS01744 = MBON16
Vertical_Lobe_MBON16 <- read.csv("AnalysisFilesSpeed/GMR_SS01744@UAS_Chrimson_Venus_X_0070@t15@r_LED100_30s2x15s30s#n#n#n@100.abscast-ave-err-data.txt", header = T, sep = "")
# SS02130 = MBON515a_15b
Vertical_Lobe_MBON515a_15b <- read.csv("AnalysisFilesSpeed/GMR_SS02130@UAS_Chrimson_Venus_X_0070@t15@r_LED100_30s2x15s30s#n#n#n@100.abscast-ave-err-data.txt", header = T, sep = "")
# SS02163 = MBON20
Vertical_Lobe_MBON20 <- read.csv("AnalysisFilesSpeed/GMR_SS02163@UAS_Chrimson_Venus_X_0070@t15@r_LED100_30s2x15s30s#n#n#n@100.abscast-ave-err-data.txt", header = T, sep = "")
plotTimeSeriesAbcast(Vertical_Lobe_MBON16)
plotTimeSeriesAbcast(Vertical_Lobe_MBON515a_15b)
plotTimeSeriesAbcast(Vertical_Lobe_MBON20)
# Medial Lobe (appetitive memory): MBON13a,b, MBON5a,b, MBON2a
# SS00894 = MBON13_13b
Medial_Lobe_MBON13_13b <- read.csv("AnalysisFilesSpeed/GMR_SS00894@UAS_Chrimson_Venus_X_0070@t15@r_LED100_30s2x15s30s#n#n#n@100.abscast-ave-err-data.txt", header = T, sep = "")
# SS01726 = MBON5a
Medial_Lobe_MBON5a <- read.csv("AnalysisFilesSpeed/GMR_SS01726@UAS_Chrimson_Venus_X_0070@t15@r_LED100_30s2x15s30s#n#n#n@100.abscast-ave-err-data.txt", header = T, sep = "")
# SS01962 = MBON5b
Medial_Lobe_MBON5b <- read.csv("AnalysisFilesSpeed/GMR_SS01962@UAS_Chrimson_Venus_X_0070@t15@r_LED100_30s2x15s30s#n#n#n@100.abscast-ave-err-data.txt", header = T, sep = "")
# SS01972 = MBON2a
Medial_Lobe_MBON2a <- read.csv("AnalysisFilesSpeed/GMR_SS01972@UAS_Chrimson_Venus_X_0070@t15@r_LED100_30s2x15s30s#n#n#n@100.abscast-ave-err-data.txt", header = T, sep = "")
plotTimeSeriesAbcast(Medial_Lobe_MBON13_13b)
plotTimeSeriesAbcast(Medial_Lobe_MBON5a)
plotTimeSeriesAbcast(Medial_Lobe_MBON5b)
plotTimeSeriesAbcast(Medial_Lobe_MBON2a)
# Convergence Neuron
# SS02108 = Convergence_Neuron
Convergence_Neuron <- read.csv("AnalysisFilesSpeed/GMR_SS02108@UAS_Chrimson_Venus_X_0070@t15@r_LED100_30s2x15s30s#n#n#n@100.abscast-ave-err-data.txt", header = T, sep = "")
plotTimeSeriesAbcast(Convergence_Neuron)
# Extra?
# SS01671 = MBON12
MBON12 <- read.csv("AnalysisFilesSpeed/GMR_SS01671@UAS_Chrimson_Venus_X_0070@t15@r_LED100_30s2x15s30s#n#n#n@100.abscast-ave-err-data.txt", header = T, sep = "")
plotTimeSeriesAbcast(MBON12)
getAttractionIndex <- function(zone1, zone2, outsidezone) {
total <- zone1 + zone2 + outsidezone
(zone1 + zone2) / total
}
getAttractionIndex(23, 3, 38)
getAttractionIndex(88, 91, 22)
getAttractionIndex(18, 17, 165)
getLearningIndex <- function(attIndexControl, attIndexTrained) {
(attIndexControl - attIndexTrained)/attIndexControl
}
getLearningIndex(getAttractionIndex(88, 91, 22), getAttractionIndex(18, 17, 165))
getPrefIndexAB <- function(zoneA, zoneB, outsidezone) {
total <- zoneA + zoneB + outsidezone
(zoneA - zoneB) / total
}
getPrefIndexBA <- function(zoneA, zoneB, outsidezone) {
total <- zoneA + zoneB + outsidezone
(zoneB - zoneA) / total
}
getPrefIndex <- function(PrefInexAB, PrefIndexBA) {
(PrefInexAB + PrefIndexBA)/2
}
getPrefIndex(0.82, 0.79)
getPrefIndexAB(11, 171, 13)
getPrefIndexAB(167, 12, 16)
getPrefIndexBA(11, 171, 13)
getAttractionIndex(93, 95, 14)
getLearningIndex(getAttractionIndex(93, 95, 14), getAttractionIndex(11, 171, 13))
getAttractionIndex(11, 171, 14)
library(caret)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
rm(list=lsI()
data(AlzheimerDisease)
rm(list=ls())
data(AlzheimerDisease)
rm(list=ls())
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
train = createDataPartition(diagnosis, p = 0.50,list=FALSE)
test = createDataPartition(diagnosis, p = 0.50,list=FALSE)
head(test)
head(trai)
head(testing)
rm(list=ls())
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
str(testing)
hist(testing$Superplasticizer)
hist(testing$FineAggregate)
hist(testing$FlyAsh)
unique(testing$Superplasticizer)
rm(list=ls())
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(testing)
library(dplyr)
?select
select(training, starts_with(IL))
select(training, starts_with("IL"))
x <- select(training, starts_with("IL"))
head(x)
preProcess(x, method = PCA, thres = 0.5)
preProcess(x, method = "PCA", thres = 0.5)
preProcess(x, method = ,pca thres = 0.5)
preProcess(x, method = pca, thres = 0.5)
preProcess(x, method = "pca", thres = 0.5)
preProcess(x, method = "pca", thres = 0.8)
?train
x2 <- preProcess(x, method = "pca", thres = 0.8)
head(x2)
head(x)
train(x, method = "glm")
train(x, testing, method = "glm")
y <- select(testing, starts_with("IL"))
train(x, y, method = "glm")
head(train)
head(training)
x <- select(training, starts_with("IL"))
x2 <- training[, 1]
head(x2)
rbind(x, x2)
z <- cbind(x, x2)
head(z)
diagnosis <- training[, 1]
rbind(x, diagnosis)
head(z)
z <- rbind(x, diagnosis)
head(z)
head(diag())
head(diagnosis
)
z <- rbind(x, training[,1])
head(z)
training[, 1]
z <- cbind(x, training[,1])
head(z)
diagnosis <- training[,1]
z <- cbind(x, diagnosis)
head(z)
fit <- train(diagnosis ~ ., data = z, method = "glm")
fit
train?
?train''
?train
fitProc <- train(diagnosis ~ ., data = z, preProcess = "pca", method = "glm")
fitProc
fitProc <- train(diagnosis ~ ., data = z, preProcess = "pca", thres = 0.8, method = "glm")
fitProc <- train(diagnosis ~ ., data = z, preProcess = "pca", thresh = 0.8, method = "glm")
x2 <- preProcess(x, method = "pca", thres = 0.8)
x2
x <- select(training, starts_with("IL"))
diagnosis <- training[, 1]
ILtrain <- rbind(x, diagnosis)
x <- select(testing, starts_with("IL"))
diagnosis2 <- testing[, 1]
ILtrain <- rbind(x, diagnosis2)
modelFit <- train(diagnosis ~., method = "glm", data = ILtrain)
head(ILtrain)
x <- select(training, starts_with("IL"))
diagnosis <- training[, 1]
ILtrain <- cbind(x, diagnosis)
x <- select(testing, starts_with("IL"))
diagnosis2 <- testing[, 1]
ILtrain <- cbind(x, diagnosis2)
head(ILtrain)
x <- select(training, starts_with("IL"))
diagnosis <- training[, 1]
ILtrain <- cbind(x, diagnosis)
x <- select(testing, starts_with("IL"))
diagnosis2 <- testing[, 1]
ILtest <- cbind(x, diagnosis2)
modelFit <- train(diagnosis ~., method = "glm", data = ILtrain)
confusionMatrix(diagnosis, predict(modelFit, ILtest))
modelFit
modelFit <- train(diagnosis ~., method = "glm", data = ILtrain, preProcess = "pca")
modelFit
choose(40, 3)
choose(3, 40)
choose(40, 3)
choose(10, 3)
choose(100, 3)
?choose
choose(52, 5)
9216/3
choose(40,3)
choose(20,3)
rm(list=ls())
rm(list=ls())
getwd()
setwd("Desktop/MachineLearningProject/")
source('~/.active-rstudio-document', echo=TRUE)
head(smpl)
trainSet<- read.csv("pml-training.csv")
testSet <- read.csv("pml-testing.csv")
set.seed(8484)
trainIndex = sample(1:dim(trainSet)[1],size=dim(trainSet)[1]/2,replace=F)
train = SAheart[trainIndex,]
test = SAheart[-trainIndex,]
set.seed(8484)
trainIndex = sample(1:dim(trainSet)[1],size=dim(trainSet)[1]/2,replace=F)
train = trainSet[trainIndex,]
test = trainSet[-trainIndex,]
head(train)
set.seed(8484)
trainIndex = sample(1:dim(trainSet)[1],size=dim(trainSet)[1]/8,replace=F)
train = trainSet[trainIndex,]
test = trainSet[-trainIndex,]
names(train)
summary(train)
modFit <- train(classe ~ roll_belt + pitch_belt + yaw_belt + avg_pitch_belt + accel_belt_x + accel_belt_y + accel_belt_z + roll_arm + accel_forearm_x + accel_forearm_y , method = "rf" data = train)
modFit <- train(classe ~ roll_belt + pitch_belt + yaw_belt + avg_pitch_belt + accel_belt_x + accel_belt_y + accel_belt_z + roll_arm + accel_forearm_x + accel_forearm_y, method = "rf", data = train)
modFit
pred <- predict(modFit,testSet)
pred
modFit
confusionMatrix(modFit)
randforest <- randomForest(classe ~ roll_belt + pitch_belt + yaw_belt + avg_pitch_belt + accel_belt_x + accel_belt_y + accel_belt_z + roll_arm + accel_forearm_x + accel_forearm_y, data = train)
randforest <- randomForest(classe ~ roll_belt + pitch_belt + yaw_belt + avg_pitch_belt + accel_belt_x + accel_belt_y + accel_belt_z + roll_arm + accel_forearm_x + accel_forearm_y, data = train, mtry=3, ntree=500, importance=TRUE, do.trace=100)
